---
import Layout from './Layout.astro';
import type { AppError, FetchError } from '../api/api';
import { ProjectNavigation } from '../components/Projects/ProjectNavigation';
import { PageError } from '../components/Errors/PageError';
import { ProjectConfigurationPending } from '@/components/ProjectSettings/ProjectConfigurationPending';

export interface Props {
	project?: Partial<{
		id: string;
		name: string;
		isConfigurationComplete: boolean;
	}>;
	requireSetup?: boolean;
	projectError?: AppError | FetchError | null;
	title: string;
	projectId: string;
	identityId?: string;
	emailId?: string;
	keyId?: string;
}

const {
	project,
	projectError,
	identityId,
	emailId,
	keyId,
	requireSetup = true,
	...props
} = Astro.props;
const hasError = !project?.id || !!projectError;
const deafultUrl = Astro.url.toString();

const isProjectConfigured = !requireSetup || project?.isConfigurationComplete;
---

<Layout {...props}>
	{
		!hasError && (
			<>
				<ProjectNavigation
					url={deafultUrl}
					projectName={project?.name!}
					projectId={project?.id!}
					identityId={identityId!}
					emailId={emailId!}
					keyId={keyId!}
				/>
				{isProjectConfigured ? (
					<section class="px-4">
						<slot />
					</section>
				) : (
					<ProjectConfigurationPending projectId={project.id!} />
				)}
			</>
		)
	}
	{
		hasError && (
			<PageError
				error={projectError?.message || 'Something went wrong'}
				className="mt-20"
			/>
		)
	}
</Layout>
